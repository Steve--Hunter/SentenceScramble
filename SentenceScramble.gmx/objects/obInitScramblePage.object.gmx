<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Init the scramble page
// Pass in global.LevelOn, global.ChapterOn, global.ChapterRow
show_debug_message("--- Entered obInitScramblePage");

var a,b; 
var TilesLaid,i,j,x1,y1;
var spr_custom, surf, SentenceOn;




/* LevelRow=scGetLevelRow(); // Get row in global.Level[] for Level/Chapter



// from starting row to starting row+no. rows in chapter -1 (last row in the Chapter)

a=real(scStringExtract(global.Level[LevelRow],"|",7)); //  starting Chapter row in Sentence/Translation array
b=a + real(scStringExtract(global.Level[LevelRow],"|",6)); // last row of sentences for Chapter
show_debug_message("a,b,LevelRow="+string(a)+","+string(b)+","+string(LevelRow));
global.SentenceIndex=a+global.ChapterRow;
*/
global.SentenceIndex=(global.LevelOn-1)*8*10+(global.ChapterOn-1)*10+global.ChapterRow+1; // First row of Level/Chapter; ChapterRow is index as Chapter progresses

a=global.SentenceIndex;
    SentenceOn=global.Sentence[a]; // get sentence to scramble
    show_debug_message("global.SentenceIndex="+string(global.SentenceIndex));
    show_debug_message("SentenceOn="+SentenceOn);
    // Extract SentenceOn string into global.CorrectString[] and global.ScrambledString[], returns count of words for global.WordCount
    global.WordCount=scExtractSentence(SentenceOn); 
    scScambleSentence(); // Scramble global.Sentence[] into global.ScrambledSentence[]
    
    var t1; // debug var
    for (t1=0; t1&lt;global.WordCount; t1=t1+1) // debug - show words extracted
        show_debug_message(global.CorrectString[t1]);
        

// Lay out the Word Grid
// screen width 1024x768
// Each Word grid 200x50

    

// row, grid counter
i=0;
j=0;

// top left corner coord of Tile
x1=0;
y1=0;

// Count how many laid-first pass lays first tile, so start at 1
TilesLaid=0; // word arrays count from 0

do 
    {
    x1 =  1024/(4+1) * (i+1) -(200/2) ;
    // y1 = 32 + (j*96); // 96 pixel gap down screen for a 4x4 grid https://trello.com/c/BjEyIhKc
    y1=j*50 // No gap vertical 
    // draw Word Grid at x,y
    inst = instance_create(x1, y1, obGrid);
    // associate correct word to be dropped
    inst.value=global.CorrectString[TilesLaid];
    inst.droppedon=""; // holds the value of the WordTile dropped onto it
    i++;
    if i==4
        {
        i=0; // back to first column
        j++; // next row
        }
    TilesLaid=TilesLaid+1;
    }
until (TilesLaid==(global.WordCount)); 



i=0;
j=0;
// top left corner coord of Tile
x1=0;
y1=0;

// Count how many laid-first pass lays first tile
TilesLaid=0;
    
// Lay out the Word Tiles
// row, grid counter
// start first tile at 512
do
    {
    x1 =  1024/(4+1) * (i+1) -(200/2) ;
    y1 = 350 + (j*96);
    // draw Word Tile at x1,y1
    inst = instance_create(x1, y1, obWordTile_NotPressed);
    // draw word on tile


    // Set word token value
    inst.value=string(global.ScrambledSentence[TilesLaid]);
// show_message("string(global.ScrambledSentence[TilesLaid])"+string(global.ScrambledSentence[TilesLaid]));
// show_message("inst.value="+inst.value);


    // Create label on the WordTiles for the words in db

    surf=surface_create(200,50);
    surface_set_target(surf);
    draw_clear_alpha(0,0);
    draw_set_alpha(1);
    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_sprite_stretched(spWordTile, 0, 0, 0, 200, 50);
    draw_set_color(c_blue);
    draw_set_font(foCatholicSchoolGirls);
    draw_text_transformed(20, 9, global.ScrambledSentence[TilesLaid], 1, 1, 0);
       


    spr_custom=sprite_create_from_surface(surf, 0, 0,200 , 50, true, true, 50, 25);
    with inst
        sprite_index=spr_custom;

    

    surface_reset_target();
    surface_free(surf);
        
    i++;
    if i==4
        {
        i=0; // back to first column
        j++; // next row
        }
    TilesLaid++;
    }
until (TilesLaid==(global.WordCount)); 


    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
